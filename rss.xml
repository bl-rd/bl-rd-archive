<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel><title>Bill&apos;s website</title><link>https://bl-rd.dev</link><description>Bletherings of Bill, a web developer based in Cumbria.</description><item><title>Website carbon</title><link>https://bl-rd.dev/posts/notes/website-carbon/</link><description><![CDATA[<p>I added <a href="https://www.wholegraindigital.com/">Wholegrain Digital's</a> <a href="https://www.websitecarbon.com/">website carbon calculator badge</a> to this site, which estimates that a single page view uses around 0.01g of CO<sup>2</sup> (at time of writing). Apparently, that's cleaner than 97% of all websites. Sounds quite good, but as this site is mainly HTML, CSS and a light dusting of JavaScript I was hoping it would be higher!</p>
<p>I've made certain design decisions to make this website as performant and &quot;lite&quot; as possible, and I'm glad to see it has paid off for the most part. The next thing I'd like to focus on is moving away from Netlify to a green hosting provider.</p>
<p>You can see what the badge looks like <a href="#wcb">here</a>.</p>
]]></description><guid>https://bl-rd.dev/posts/notes/website-carbon/</guid><pubDate>Mon, 29 Mar 2021 19:46:04 +0000</pubDate></item><item><title>Monochrome heart</title><link>https://bl-rd.dev/posts/things/monochrome-heart/</link><description><![CDATA[<p>Pen for the last week of <a href="https://codepen.io/challenges/2021/march/">Codepen's colour challenge</a>.</p>
<p><a href="https://codepen.io/bl-rd/full/WNRrjPO">Have a look</a></p>
]]></description><guid>https://bl-rd.dev/posts/things/monochrome-heart/</guid><pubDate>Thu, 25 Mar 2021 20:36:50 +0000</pubDate></item><item><title>WaniKani is awesome</title><link>https://bl-rd.dev/posts/notes/wanikani-is-awesome/</link><description><![CDATA[<p>I'm learning Japanese‚Äîjust because‚Äîand I'm using <a href="https://www.wanikani.com">WaniKani</a> to learn how to <em>read</em> Japanese. </p>
<p>Unless you're a language‚Äìlearning buff, that might sound pretty dull. But the user experience of using WaniKani is something else. So much so that I'm actually <strong>paying</strong> to use the service! The tone of the mnemonics they use, the design of the website ‚Äê hell, even the emails they send you when you level up are great.</p>
<p>It's really good to see. And the fact that this is a website (and not a native mobile app) that works <em>beautifully</em> on a small device makes me happy. Hats off.</p>
]]></description><guid>https://bl-rd.dev/posts/notes/wanikani-is-awesome/</guid><pubDate>Fri, 19 Mar 2021 21:15:16 +0000</pubDate></item><item><title>A note</title><link>https://bl-rd.dev/posts/notes/a-note/</link><description><![CDATA[<p>So here it is, my first <a href="https://indieweb.org/note">note</a> ü•≥</p>
<p>It doesn't do anything other than represent a minimal &quot;post&quot; at this stage, but I'm going to have an experiment to see if it might be a worthwhile development.</p>
<p>In the interests of making this post less dull, <a href="https://kaguu.bandcamp.com/">Kaguu</a> are <strong>awesome</strong>.</p>
]]></description><guid>https://bl-rd.dev/posts/notes/a-note/</guid><pubDate>Wed, 03 Mar 2021 20:59:20 +0000</pubDate></item><item><title>Website animations</title><link>https://bl-rd.dev/posts/things/website-animations/</link><description><![CDATA[I'm putting all the animations from this site into a Codepen collection, because why not!]]></description><guid>https://bl-rd.dev/posts/things/website-animations/</guid><pubDate>Tue, 23 Feb 2021 23:05:56 +0000</pubDate></item><item><title>Web dev is a Dark Souls game</title><link>https://bl-rd.dev/posts/web-dev-is-a-dark-souls-game/</link><description><![CDATA[<h2>Sorry, a what now?</h2>
<p>I didn't really know what Dark Souls was (other than a computer game), although I had at least <em>heard</em> about it. Then lockdown 1.0 happened and it was on offer, so I tried it out.</p>
<p>Essentially, Dark Souls is an extremely difficult computer game that has you doing the same fighty-fighty stuff over and over until you master it and can move on. You play as some sort of fighting/thieving/magic person and you have to battle loads of monsters in a world ravaged by something. Oh, and you lose stuff every time you die. Oh, and everybody is either crazy or miserable. But sure, <a href="https://kotaku.com/what-dark-souls-is-really-all-about-5874599">there are better explanations out there</a>, if you're interested.</p>
<p>Honestly though, the lore and setting are quite cool but I'm terrible at remembering those sort of details! And I was <em>really</em> into into it, <strong>for a while</strong> at least.</p>
<blockquote>
  <p>Ahh you think you're different? That you can handle it? Yes, I remember that feeling. For I was the same.</p>
  <cite>Crestfallen Merchant, Dark Souls</cite>
</blockquote>
<h2>So... Web development?</h2>
<p>Obviously, this is <strong>exactly like modern front-end web development</strong>.</p>
<p>Well maybe not at first glance, but if you are involved in the web world in any form, I'm sure you are aware of how fast things move. There is always something new to learn, or some <del>hot new</del> <ins>better way</ins> of doing things. Mastered a framework? Unfortunately, that framework is now obsolete/non-maintained/gone up a major version/uncool and you should be doing it <em>this way</em> instead. This loop felt like <em>levelling up</em>, even if only when reflecting back on how far you might have come.</p>
<p>It's non-stop and, at times, overwhelming. But that's what makes it interesting, and often exciting! For a long time I've been able to keep up, and I believed it was my responsibility as a web developer to keep an eye on things, learn x and use y. And for a long time, it was enjoyable!</p>
<p>But this is where, for me, it starts to become a &quot;Souls&quot; game... The fun goes. After seeing the 1000th article about why I should be learning React with Typescript and GraphQL I pretty much checked out. Sounds suspiciously like a thing called ‚Äúburnout‚Äù, but it didn't <em>feel</em> like what I'd read about burnout. I still liked web development ‚Äì it's just that JavaScript things lost their appeal. For those in the know, this was my ‚Äú<a href="https://darksouls.wiki.fextralife.com/Seath+The+Scaleless">Seath the Scaleless</a>‚Äù moment in Dark Souls land (the second time, not the first time!).</p>
<h2>Moving on</h2>
<p>Anecdotally, most people that start Dark Souls don't finish it. It doesn't mean it wasn't worth the ride. As there are many beautiful and deep moments in Dark Souls, running the web dev race has been good fun and I've learned a lot.</p>
<p>This comparison that ends in me quitting Dark Souls doesn't mean I have decided to get out of the web game (so to speak). I now appreciate what I <em>can focus on</em> and what I <strong>do care about</strong> in this industry. There is still plenty of levelling up to be done, but my viewpoint has shifted. Mastering the craft doesn't mean playing with every new tool that comes out. It doesn't mean being at the cutting edge of things. It's about being liberated from the rat-race of being a ‚ÄúReact dev‚Äù or a ‚ÄúSvelte dev‚Äù or a ‚ÄúVue dev‚Äù or a ‚ÄúTailwind evangelist‚Äù. It's about fundamentals.</p>
<p>Learning JavaScript best practices; is JavaScript even needed?; what are the accessibility implications?; is performance going to be affected?; am I using the appropriate HTML elements?; What is the most efficient way of doing this with CSS? What about no JavaScript users and older browsers?</p>
<p>These are the questions that I find more interesting these days. Even if I don't make it to <del>the end of the game</del> <ins>senior developer level</ins>, asking these types of questions will allow me to be the best developer I can be. I genuinely believe that this approach can make any developer framework-agnostic. This may or may not sound obvious, but if you are neck-deep in front-end newsletters and blogs then it can be easy to forget.</p>
<p>To be fair, I think this realisation has come with both the benefit of experience and a global pandemic. Life is too short to be forcing yourself to spend evenings learning things that you are told you <strong>need to learn right now</strong>, when, in the real world, you really don't.</p>
<p>Aaaand I think that is as far as I can take this comparison. It seemed like a good idea at the time üôÇ</p>
<blockquote>
  <p>
    What‚Äôs wrong? Get a bit of a scare out there? No problem. Have a seat and get comfortable. We‚Äôll both be hollow before you know it.
  </p>
  <cite>Crestfallen Warrior, Dark Souls</cite>
</blockquote>]]></description><guid>https://bl-rd.dev/posts/web-dev-is-a-dark-souls-game/</guid><pubDate>Wed, 17 Feb 2021 21:05:01 +0000</pubDate></item><item><title>Rock, Paper, (Rusty) Scissors</title><link>https://bl-rd.dev/posts/things/rock-paper-rusty-scissors/</link><description><![CDATA[<p>A game of Rock, Paper, Scissors, built with Rust and wasm-bindgen</p>
<p><a href="https://github.com/bl-rd/rock-paper-rusty-scissors">Play the game</a></p>
]]></description><guid>https://bl-rd.dev/posts/things/rock-paper-rusty-scissors/</guid><pubDate>Sat, 30 May 2020 17:02:44 +0000</pubDate></item><item><title>Video-game style text</title><link>https://bl-rd.dev/posts/video-game-style-text/</link><description><![CDATA[<h2>But why?</h2>
<p>Because <em>it's my website</em> and <strong>I wanted to</strong>!</p>
<p>I've been playing a few pixel art games over the last year or so (for example <a href="https://yachtclubgames.com/shovel-knight/">Shovel Knight</a>, <a href="http://www.celestegame.com/">Celeste</a>) and liked how adding movement to text could add extra meaning.</p>
<p>As moving of the letters is used for extra emphasis, or to imply some significance, I liked the idea of adding some movement to the <code>&lt;em&gt;</code> and <code>&lt;strong&gt;</code> tags to add further meaning to their semantics.</p>
<p>I've chosen to use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">Web Animations API</a> (instead of CSS animations) as I can have more control over each animated element without having to rely on a CSS pre-processor.</p>
<h2>Targeting individual letters</h2>
<p>To animate each letter, I need a way of targeting them each in turn. This is quite easy to do, using a nifty trick that I picked up from <a href="https://tobiasahlin.com/">Tobias Ahlin</a>'s <a href="https://tobiasahlin.com/moving-letters/">Moving Letters project</a>. However, there is a slight complication, in that we also need a way of determining the individual words to stop them wrapping in the middle of a word.</p>
<pre style="background-color:#2b303b;">
<span style="color:#65737e;">// get the elements from the DOM
</span><span style="color:#b48ead;">const </span><span style="color:#bf616a;">bold </span><span style="color:#c0c5ce;">= </span><span style="color:#ebcb8b;">Array</span><span style="color:#c0c5ce;">.</span><span style="color:#8fa1b3;">from</span><span style="color:#c0c5ce;">(document.</span><span style="color:#8fa1b3;">querySelectorAll</span><span style="color:#c0c5ce;">(&#39;</span><span style="color:#a3be8c;">strong</span><span style="color:#c0c5ce;">&#39;));
</span><span style="color:#c0c5ce;">
</span><span style="color:#bf616a;">bold</span><span style="color:#c0c5ce;">.</span><span style="color:#8fa1b3;">forEach</span><span style="color:#c0c5ce;">(b </span><span style="color:#b48ead;">=&gt; </span><span style="color:#c0c5ce;">{
</span><span style="color:#c0c5ce;">  </span><span style="color:#65737e;">// wrap each separate word in the tag in a span
</span><span style="color:#c0c5ce;">  </span><span style="color:#bf616a;">b</span><span style="color:#c0c5ce;">.innerHTML = `
</span><span style="color:#a3be8c;">    &lt;span class=&quot;text-animation&quot;&gt;&lt;span class=&quot;text-animation__word&quot;&gt;
</span><span style="color:#a3be8c;">      </span><span style="color:#c0c5ce;">${</span><span style="color:#bf616a;">b</span><span style="color:#c0c5ce;">.textContent.</span><span style="color:#8fa1b3;">trim</span><span style="color:#c0c5ce;">().</span><span style="color:#8fa1b3;">replace</span><span style="color:#c0c5ce;">(/</span><span style="color:#d08770;">\s</span><span style="color:#c0c5ce;">/</span><span style="color:#b48ead;">ig</span><span style="color:#c0c5ce;">,&#39;</span><span style="color:#a3be8c;">&lt;/span&gt;&lt;span class=&quot;text-animation__word&quot;&gt;$&amp;</span><span style="color:#c0c5ce;">&#39;)}
</span><span style="color:#a3be8c;">    &lt;/span&gt;</span><span style="color:#c0c5ce;">`;
</span><span style="color:#c0c5ce;">
</span><span style="color:#c0c5ce;">  </span><span style="color:#65737e;">// wrap each individual letter in the word in a span that we will target for the animation
</span><span style="color:#c0c5ce;">  </span><span style="color:#b48ead;">const </span><span style="color:#bf616a;">words </span><span style="color:#c0c5ce;">= </span><span style="color:#ebcb8b;">Array</span><span style="color:#c0c5ce;">.</span><span style="color:#8fa1b3;">from</span><span style="color:#c0c5ce;">(</span><span style="color:#bf616a;">b</span><span style="color:#c0c5ce;">.</span><span style="color:#8fa1b3;">querySelectorAll</span><span style="color:#c0c5ce;">(&#39;</span><span style="color:#a3be8c;">.vg-text-animation__word</span><span style="color:#c0c5ce;">&#39;));
</span><span style="color:#c0c5ce;">    </span><span style="color:#bf616a;">words</span><span style="color:#c0c5ce;">.</span><span style="color:#8fa1b3;">forEach</span><span style="color:#c0c5ce;">((word, index) </span><span style="color:#b48ead;">=&gt; </span><span style="color:#c0c5ce;">{
</span><span style="color:#c0c5ce;">      </span><span style="color:#bf616a;">word</span><span style="color:#c0c5ce;">.innerHTML = </span><span style="color:#bf616a;">word</span><span style="color:#c0c5ce;">.innerHTML.</span><span style="color:#8fa1b3;">replace</span><span style="color:#c0c5ce;">(/</span><span style="color:#d08770;">\s</span><span style="color:#c0c5ce;">/</span><span style="color:#b48ead;">g</span><span style="color:#c0c5ce;">, &#39;&#39;);
</span><span style="color:#c0c5ce;">      </span><span style="color:#bf616a;">word</span><span style="color:#c0c5ce;">.innerHTML = </span><span style="color:#bf616a;">word</span><span style="color:#c0c5ce;">.textContent
</span><span style="color:#c0c5ce;">        .</span><span style="color:#8fa1b3;">replace</span><span style="color:#c0c5ce;">(/</span><span style="color:#d08770;">\S</span><span style="color:#c0c5ce;">/</span><span style="color:#b48ead;">g</span><span style="color:#c0c5ce;">, &#39;</span><span style="color:#a3be8c;">&lt;span class=&quot;vg-text-animation__letter vg-text-animation__letter--bold&quot;&gt;$&amp;&lt;/span&gt;</span><span style="color:#c0c5ce;">&#39;);
</span><span style="color:#c0c5ce;">      </span><span style="color:#65737e;">// if there is another word after this one then add some whitespace
</span><span style="color:#c0c5ce;">      </span><span style="color:#b48ead;">if </span><span style="color:#c0c5ce;">(</span><span style="color:#bf616a;">words</span><span style="color:#c0c5ce;">.length &gt; </span><span style="color:#d08770;">1 </span><span style="color:#c0c5ce;">&amp;&amp; </span><span style="color:#bf616a;">index </span><span style="color:#c0c5ce;">&lt; </span><span style="color:#bf616a;">words</span><span style="color:#c0c5ce;">.length - </span><span style="color:#d08770;">1</span><span style="color:#c0c5ce;">) {
</span><span style="color:#c0c5ce;">        </span><span style="color:#bf616a;">word</span><span style="color:#c0c5ce;">.innerHTML += &#39;</span><span style="color:#a3be8c;">&amp;nbsp;</span><span style="color:#c0c5ce;">&#39;;
</span><span style="color:#c0c5ce;">      }
</span><span style="color:#c0c5ce;">  });
</span><span style="color:#c0c5ce;">});
</span><span style="color:#c0c5ce;">
</span></pre>
<p>One additional thing ‚Äî we need some CSS to stop the words wrapping and also to get the letters to actually animate.</p>
<pre style="background-color:#2b303b;">
<span style="color:#8fa1b3;">.</span><span style="color:#d08770;">vg-text-animation__word </span><span style="color:#c0c5ce;">{
</span><span style="color:#c0c5ce;">  display: inline-block;
</span><span style="color:#c0c5ce;">}
</span><span style="color:#c0c5ce;">
</span><span style="color:#8fa1b3;">.</span><span style="color:#d08770;">vg-text-animation__letter </span><span style="color:#c0c5ce;">{
</span><span style="color:#c0c5ce;">  position: relative;
</span><span style="color:#c0c5ce;">  display: inline-block;
</span><span style="color:#c0c5ce;">}
</span></pre>
<h2>Animate all the things</h2>
<p>Now we have our elements, they can be animated with the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">Web Animations API!</a></p>
<p>You can call <code>animate</code> on an appropriate DOMElement to trigger an animation. This provides an easy way to test browser support, and just return out the function if the browser doesn't like it.</p>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animate">animate function</a> takes two arguments ‚Äî <code>keyframes</code> and <code>options</code>.</p>
<p>The <code>keyframes</code> can be thought of as a JavaScript of version of the steps defined in a CSS <code>@keyframes</code> animation. To be honest, I found this step difficult. This was mainly due to browser support for animating from or to a property that hasn't been explicitly stated seems ropey at present.</p>
<p>The <code>options</code> argument is the equivalent of all the other animation properties that you can be defined in CSS. I'd recommend a look at the <a href="https://css-tricks.com/css-animations-vs-web-animations-api/">CSS Tricks article</a> that looks at the differences and similiarites between CSS animations and the Web Animations API.</p>
<pre style="background-color:#2b303b;">
<span style="color:#65737e;">// feature-sniff for the web animations api
</span><span style="color:#b48ead;">if </span><span style="color:#c0c5ce;">(!</span><span style="color:#ebcb8b;">HTMLElement</span><span style="color:#c0c5ce;">.prototype.animate) {
</span><span style="color:#c0c5ce;">  </span><span style="color:#b48ead;">return</span><span style="color:#c0c5ce;">;
</span><span style="color:#c0c5ce;">}
</span><span style="color:#c0c5ce;">
</span><span style="color:#65737e;">// our animation frames - rotate the elements back and forth
</span><span style="color:#b48ead;">const </span><span style="color:#bf616a;">frames </span><span style="color:#c0c5ce;">= [
</span><span style="color:#c0c5ce;"> { transform: &#39;</span><span style="color:#a3be8c;">rotate(-4deg)</span><span style="color:#c0c5ce;">&#39;, offset: </span><span style="color:#d08770;">0 </span><span style="color:#c0c5ce;">},
</span><span style="color:#c0c5ce;"> { transform: &#39;</span><span style="color:#a3be8c;">rotate(4deg)</span><span style="color:#c0c5ce;">&#39;, offset: </span><span style="color:#d08770;">1 </span><span style="color:#c0c5ce;">}
</span><span style="color:#c0c5ce;">];
</span><span style="color:#c0c5ce;">
</span><span style="color:#b48ead;">const </span><span style="color:#bf616a;">letters </span><span style="color:#c0c5ce;">= document.</span><span style="color:#8fa1b3;">querySelectorAll</span><span style="color:#c0c5ce;">(&#39;</span><span style="color:#a3be8c;">.vg-text-animation__letter--bold</span><span style="color:#c0c5ce;">&#39;);
</span><span style="color:#bf616a;">letters</span><span style="color:#c0c5ce;">.</span><span style="color:#8fa1b3;">forEach</span><span style="color:#c0c5ce;">((l, idx) </span><span style="color:#b48ead;">=&gt; </span><span style="color:#c0c5ce;">{
</span><span style="color:#c0c5ce;">  </span><span style="color:#bf616a;">l</span><span style="color:#c0c5ce;">.</span><span style="color:#8fa1b3;">animate</span><span style="color:#c0c5ce;">(</span><span style="color:#bf616a;">frames</span><span style="color:#c0c5ce;">, {
</span><span style="color:#c0c5ce;">    iterations: </span><span style="color:#d08770;">Infinity</span><span style="color:#c0c5ce;">,
</span><span style="color:#c0c5ce;">    direction: &#39;</span><span style="color:#a3be8c;">normal</span><span style="color:#c0c5ce;">&#39;,
</span><span style="color:#c0c5ce;">    easing: &#39;</span><span style="color:#a3be8c;">cubic-bezier(0.9,-1,0.1,1)</span><span style="color:#c0c5ce;">&#39;,
</span><span style="color:#c0c5ce;">    duration: </span><span style="color:#d08770;">200</span><span style="color:#c0c5ce;">,
</span><span style="color:#c0c5ce;">    </span><span style="color:#65737e;">// small offset based on the index of each element to provide variation
</span><span style="color:#c0c5ce;">    delay: </span><span style="color:#bf616a;">idx </span><span style="color:#c0c5ce;">* </span><span style="color:#d08770;">80
</span><span style="color:#c0c5ce;">  });
</span><span style="color:#c0c5ce;">});
</span></pre>
<h2>The result</h2>
<p class="codepen" data-height="289" data-theme-id="dark" data-default-tab="result" data-user="bl-rd"
    data-slug-hash="vYEeoNm" data-preview="true"
    style="height: 289px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"
    data-pen-title="2">
    <span>See the Pen <a href="https://codepen.io/bl-rd/pen/vYEeoNm">
            2</a> by Bill (<a href="https://codepen.io/bl-rd">@bl-rd</a>)
        on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script defer src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Bonus points</h2>
<p>Performance wise, I'd prefer not to have a load of animations running when the user isn't even looking at them. As these animations are being triggered via JavaScript, it means the <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver">Intersection Observer API</a> can also be used to only start the animation when elements are in the viewport.</p>
<pre style="background-color:#2b303b;">
<span style="color:#bf616a;">letters</span><span style="color:#c0c5ce;">.</span><span style="color:#8fa1b3;">forEach</span><span style="color:#c0c5ce;">((l, idx) </span><span style="color:#b48ead;">=&gt; </span><span style="color:#c0c5ce;">{
</span><span style="color:#c0c5ce;">  </span><span style="color:#65737e;">// assign to a variable to access later
</span><span style="color:#c0c5ce;">  </span><span style="color:#b48ead;">const </span><span style="color:#bf616a;">anim </span><span style="color:#c0c5ce;">= </span><span style="color:#bf616a;">l</span><span style="color:#c0c5ce;">.</span><span style="color:#8fa1b3;">animate</span><span style="color:#c0c5ce;">(</span><span style="color:#bf616a;">frames</span><span style="color:#c0c5ce;">, {
</span><span style="color:#c0c5ce;">    iterations: </span><span style="color:#d08770;">Infinity</span><span style="color:#c0c5ce;">,
</span><span style="color:#c0c5ce;">    direction: &#39;</span><span style="color:#a3be8c;">normal</span><span style="color:#c0c5ce;">&#39;,
</span><span style="color:#c0c5ce;">    easing: &#39;</span><span style="color:#a3be8c;">cubic-bezier(0.9,-1,0.1,1)</span><span style="color:#c0c5ce;">&#39;,
</span><span style="color:#c0c5ce;">    duration: </span><span style="color:#d08770;">200</span><span style="color:#c0c5ce;">,
</span><span style="color:#c0c5ce;">    </span><span style="color:#65737e;">// small offset based on the index of each element to provide variation
</span><span style="color:#c0c5ce;">    delay: </span><span style="color:#bf616a;">idx </span><span style="color:#c0c5ce;">* </span><span style="color:#d08770;">80
</span><span style="color:#c0c5ce;">  });
</span><span style="color:#c0c5ce;">
</span><span style="color:#c0c5ce;">  </span><span style="color:#65737e;">// create a new instance observer, and only play
</span><span style="color:#c0c5ce;">  </span><span style="color:#65737e;">// the animation if the element is in the viewport
</span><span style="color:#c0c5ce;">  </span><span style="color:#b48ead;">let </span><span style="color:#bf616a;">observer </span><span style="color:#c0c5ce;">= new </span><span style="color:#bf616a;">IntersectionObserver</span><span style="color:#c0c5ce;">(entries </span><span style="color:#b48ead;">=&gt; </span><span style="color:#c0c5ce;">{
</span><span style="color:#c0c5ce;">    </span><span style="color:#bf616a;">entries</span><span style="color:#c0c5ce;">.</span><span style="color:#8fa1b3;">forEach</span><span style="color:#c0c5ce;">(e </span><span style="color:#b48ead;">=&gt; </span><span style="color:#c0c5ce;">{
</span><span style="color:#c0c5ce;">      </span><span style="color:#b48ead;">if </span><span style="color:#c0c5ce;">(</span><span style="color:#bf616a;">e</span><span style="color:#c0c5ce;">.isIntersecting) {
</span><span style="color:#c0c5ce;">        </span><span style="color:#bf616a;">anim</span><span style="color:#c0c5ce;">.</span><span style="color:#8fa1b3;">play</span><span style="color:#c0c5ce;">();
</span><span style="color:#c0c5ce;">      } </span><span style="color:#b48ead;">else </span><span style="color:#c0c5ce;">{
</span><span style="color:#c0c5ce;">        </span><span style="color:#bf616a;">anim</span><span style="color:#c0c5ce;">.</span><span style="color:#8fa1b3;">cancel</span><span style="color:#c0c5ce;">();
</span><span style="color:#c0c5ce;">      }
</span><span style="color:#c0c5ce;">    });    
</span><span style="color:#c0c5ce;">    }, {
</span><span style="color:#c0c5ce;">      root: </span><span style="color:#d08770;">null</span><span style="color:#c0c5ce;">,
</span><span style="color:#c0c5ce;">      rootMargin: &#39;</span><span style="color:#a3be8c;">0px</span><span style="color:#c0c5ce;">&#39;
</span><span style="color:#c0c5ce;">    });
</span><span style="color:#c0c5ce;">    </span><span style="color:#bf616a;">observer</span><span style="color:#c0c5ce;">.</span><span style="color:#8fa1b3;">observe</span><span style="color:#c0c5ce;">(</span><span style="color:#bf616a;">l</span><span style="color:#c0c5ce;">);
</span><span style="color:#c0c5ce;">});
</span><span style="color:#c0c5ce;">
</span></pre>
<p>Ideally, this would be applied at the <em>word</em> level as opposed to the individual letter level, but for now, this works quite nicely.</p>
<h2>Accessibility</h2>
<p>Adding animation adds motion to our page, and that is <a href="https://css-tricks.com/introduction-reduced-motion-media-query/">known to impact users with various conditions</a>.</p>
<p>Thankfully the <code>prefers-reduced-motion</code> feature query makes it quite straight forward. Using this nifty feature, we can detect the user's preference at the operating system level.</p>
<pre style="background-color:#2b303b;">
<span style="color:#65737e;">// feature-sniff for the web animations api
</span><span style="color:#b48ead;">if </span><span style="color:#c0c5ce;">(!</span><span style="color:#ebcb8b;">HTMLElement</span><span style="color:#c0c5ce;">.prototype.animate) {
</span><span style="color:#c0c5ce;">  </span><span style="color:#b48ead;">return</span><span style="color:#c0c5ce;">;
</span><span style="color:#c0c5ce;">}
</span><span style="color:#c0c5ce;">
</span><span style="color:#b48ead;">const </span><span style="color:#c0c5ce;">{ matchMedia: </span><span style="color:#bf616a;">media </span><span style="color:#c0c5ce;">} = window;
</span><span style="color:#c0c5ce;">
</span><span style="color:#65737e;">// return if the user has turned off animation in the OS
</span><span style="color:#b48ead;">if </span><span style="color:#c0c5ce;">(</span><span style="color:#bf616a;">media </span><span style="color:#c0c5ce;">&amp;&amp; </span><span style="color:#8fa1b3;">media</span><span style="color:#c0c5ce;">(&#39;</span><span style="color:#a3be8c;">(prefers-reduced-motion: reduce)</span><span style="color:#c0c5ce;">&#39;).matches) {
</span><span style="color:#c0c5ce;">  </span><span style="color:#b48ead;">return</span><span style="color:#c0c5ce;">;
</span><span style="color:#c0c5ce;">}
</span></pre>
<p>In the future, I'd like to have a toggle for people who find the animations annoying, but don't generally want them disabled everywhere!</p>
<h2>Is it worth it?</h2>
<p>Maybe? I think it does add some extra (appropriate) emphasis, as well as a bit of character but I appreciate it might not be to everyone's taste.</p>
<p>I liked learning about the Web Animations API and <strong>love</strong> that there is a library free way of doing this type of animation. I'm sure there are certainly plenty of creative possibilities to be had in the future, especially when <a href="https://caniuse.com/#feat=web-animation">the full implementation of the API appears in browsers</a>.</p>
<p>As it stands I like it and, as I said before, <em>it's my website</em>!</p>
]]></description><guid>https://bl-rd.dev/posts/video-game-style-text/</guid><pubDate>Sun, 16 Feb 2020 16:55:38 +0000</pubDate></item><item><title>Hello, world!</title><link>https://bl-rd.dev/posts/hello-world/</link><description><![CDATA[<h2>Why</h2>
<p>Initially, it was <a href="https://www.jvt.me/posts/2019/07/22/why-website/">this blog article</a> by Jamie Tanna that resonated with me and got me thinking about creating my own site. As well as being a <em>good citizen of the web</em>, I have three main motivations:</p>
<ul>
<li>refining/improving my front-end skills;</li>
<li>the <a href="https://indieweb.org/">indieweb movement</a>;</li>
<li>keeping a track of what I've been up to</li>
</ul>
<p>Also, personal sites are <a href="https://personalsit.es/">all the rage these days</a>!</p>
<h2>Sharpen the saw</h2>
<p>My plan for 2020 is to focus on becoming a <strong>specialist</strong> front-end developer - and there are a lot of new features and APIs being shipped these days. Having a personal site will hopefully push me to try some of these shiny new things. At the time of writing, this site (progressively!) uses <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">native web components</a> and the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">web animations API</a>.</p>
<h2>Indieweb</h2>
<p>The <a href="https://indieweb.org/">indieweb</a> sounds pretty cool, and ticks a lot of boxes for me. Even as a reasonably seasoned developer though, I find the sheer amount of concepts rather overwhelming ‚Äî thankfully sites like <a href="https://indiewebify.me/">indiewebify.me</a> simplify things a bit. It'll be a continual work in progress, but as with most things on the web, a fun challenge.</p>
<h2>Self-documentation</h2>
<p>There is also the additional benefit of having somewhere just to dump <em>stuff</em>. For example, I am planning to keep track of my favourite albums as I discover them, and I (very) occasionally like to think I can learn to make art and I like the idea of having a decentralised place where I can store what I make and keep track of what I've done.</p>
<p>There is also the subject of blogging, or just sharing generally. I've read so many times that is a good thing to blog about web dev stuff, but I've always been too introverted to do it. While I don't really agree with the term or the connotations, I can probably be categorised as a <a href="https://css-tricks.com/dark-matter-what-it-is-and-how-we-all-contribute-to-it/">Dark-Matter Developer</a>. I've read plenty of blogs, been to conferences, looked at loads of talented people's work but never felt like I could contribute anything meaningful. Well, going forward I'm taking the approach of ‚Äú<a href="https://www.sarasoueidan.com/desk/just-write/">Just Write</a>‚Äù and see what happens. At the very least it will serve as a useful reminder for future me, and help me focus my thoughts in a vaguely coherent way!</p>
<h2>Bonus points</h2>
<p>The bottom line is that I'm hoping to enjoy it. It will be nice to revisit why I enjoy working in this industry and to experiment and challenge myself on the way. All in my safe little corner of the world wide web.</p>
]]></description><guid>https://bl-rd.dev/posts/hello-world/</guid><pubDate>Thu, 02 Jan 2020 14:37:33 +0000</pubDate></item><item><title>Gravity Hamster</title><link>https://bl-rd.dev/posts/things/gravity-hamster/</link><description><![CDATA[A pen I was very surprised to find featured on Codepen's "picked pens" list one day.]]></description><guid>https://bl-rd.dev/posts/things/gravity-hamster/</guid><pubDate>Tue, 14 May 2019 21:25:06 +0000</pubDate></item></channel></rss>
